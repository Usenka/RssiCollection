/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DemoCollectionMsg'
 * message type.
 */

public class DemoCollectionMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 18;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new DemoCollectionMsg of size 18. */
    public DemoCollectionMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DemoCollectionMsg of the given data_length. */
    public DemoCollectionMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DemoCollectionMsg with the given data_length
     * and base offset.
     */
    public DemoCollectionMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DemoCollectionMsg using the given byte array
     * as backing store.
     */
    public DemoCollectionMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DemoCollectionMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DemoCollectionMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DemoCollectionMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DemoCollectionMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DemoCollectionMsg embedded in the given message
     * at the given base offset.
     */
    public DemoCollectionMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DemoCollectionMsg embedded in the given message
     * at the given base offset and length.
     */
    public DemoCollectionMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DemoCollectionMsg> \n";
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seq_num=0x"+Long.toHexString(get_seq_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=0x"+Long.toHexString(get_data())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hop_id=0x"+Long.toHexString(get_hop_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hop_rcvt=0x"+Long.toHexString(get_hop_rcvt())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hop_sndt=0x"+Long.toHexString(get_hop_sndt())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (false).
     */
    public static boolean isSigned_nodeid() {
        return false;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seq_num
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seq_num' is signed (false).
     */
    public static boolean isSigned_seq_num() {
        return false;
    }

    /**
     * Return whether the field 'seq_num' is an array (false).
     */
    public static boolean isArray_seq_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seq_num'
     */
    public static int offset_seq_num() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seq_num'
     */
    public static int offsetBits_seq_num() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'seq_num'
     */
    public long get_seq_num() {
        return (long)getUIntBEElement(offsetBits_seq_num(), 32);
    }

    /**
     * Set the value of the field 'seq_num'
     */
    public void set_seq_num(long value) {
        setUIntBEElement(offsetBits_seq_num(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'seq_num'
     */
    public static int size_seq_num() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seq_num'
     */
    public static int sizeBits_seq_num() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (false).
     */
    public static boolean isArray_data() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'data'
     */
    public int get_data() {
        return (int)getUIntBEElement(offsetBits_data(), 16);
    }

    /**
     * Set the value of the field 'data'
     */
    public void set_data(int value) {
        setUIntBEElement(offsetBits_data(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data'
     */
    public static int size_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data'
     */
    public static int sizeBits_data() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hop_id
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hop_id' is signed (false).
     */
    public static boolean isSigned_hop_id() {
        return false;
    }

    /**
     * Return whether the field 'hop_id' is an array (false).
     */
    public static boolean isArray_hop_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hop_id'
     */
    public static int offset_hop_id() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hop_id'
     */
    public static int offsetBits_hop_id() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'hop_id'
     */
    public int get_hop_id() {
        return (int)getUIntBEElement(offsetBits_hop_id(), 16);
    }

    /**
     * Set the value of the field 'hop_id'
     */
    public void set_hop_id(int value) {
        setUIntBEElement(offsetBits_hop_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'hop_id'
     */
    public static int size_hop_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hop_id'
     */
    public static int sizeBits_hop_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hop_rcvt
    //   Field type: long, unsigned
    //   Offset (bits): 80
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hop_rcvt' is signed (false).
     */
    public static boolean isSigned_hop_rcvt() {
        return false;
    }

    /**
     * Return whether the field 'hop_rcvt' is an array (false).
     */
    public static boolean isArray_hop_rcvt() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hop_rcvt'
     */
    public static int offset_hop_rcvt() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hop_rcvt'
     */
    public static int offsetBits_hop_rcvt() {
        return 80;
    }

    /**
     * Return the value (as a long) of the field 'hop_rcvt'
     */
    public long get_hop_rcvt() {
        return (long)getUIntBEElement(offsetBits_hop_rcvt(), 32);
    }

    /**
     * Set the value of the field 'hop_rcvt'
     */
    public void set_hop_rcvt(long value) {
        setUIntBEElement(offsetBits_hop_rcvt(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'hop_rcvt'
     */
    public static int size_hop_rcvt() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hop_rcvt'
     */
    public static int sizeBits_hop_rcvt() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hop_sndt
    //   Field type: long, unsigned
    //   Offset (bits): 112
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hop_sndt' is signed (false).
     */
    public static boolean isSigned_hop_sndt() {
        return false;
    }

    /**
     * Return whether the field 'hop_sndt' is an array (false).
     */
    public static boolean isArray_hop_sndt() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hop_sndt'
     */
    public static int offset_hop_sndt() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hop_sndt'
     */
    public static int offsetBits_hop_sndt() {
        return 112;
    }

    /**
     * Return the value (as a long) of the field 'hop_sndt'
     */
    public long get_hop_sndt() {
        return (long)getUIntBEElement(offsetBits_hop_sndt(), 32);
    }

    /**
     * Set the value of the field 'hop_sndt'
     */
    public void set_hop_sndt(long value) {
        setUIntBEElement(offsetBits_hop_sndt(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'hop_sndt'
     */
    public static int size_hop_sndt() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hop_sndt'
     */
    public static int sizeBits_hop_sndt() {
        return 32;
    }

}
