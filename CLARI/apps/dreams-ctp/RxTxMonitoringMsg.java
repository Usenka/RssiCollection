/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RxTxMonitoringMsg'
 * message type.
 */

public class RxTxMonitoringMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 80;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 144;

    /** Create a new RxTxMonitoringMsg of size 80. */
    public RxTxMonitoringMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RxTxMonitoringMsg of the given data_length. */
    public RxTxMonitoringMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RxTxMonitoringMsg with the given data_length
     * and base offset.
     */
    public RxTxMonitoringMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RxTxMonitoringMsg using the given byte array
     * as backing store.
     */
    public RxTxMonitoringMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RxTxMonitoringMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public RxTxMonitoringMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RxTxMonitoringMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RxTxMonitoringMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RxTxMonitoringMsg embedded in the given message
     * at the given base offset.
     */
    public RxTxMonitoringMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RxTxMonitoringMsg embedded in the given message
     * at the given base offset and length.
     */
    public RxTxMonitoringMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RxTxMonitoringMsg> \n";
      try {
        s += "  [infos.type=0x"+Long.toHexString(get_infos_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [infos.log_src=0x"+Long.toHexString(get_infos_log_src())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [infos.timestamp=0x"+Long.toHexString(get_infos_timestamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [infos.seq_num=0x"+Long.toHexString(get_infos_seq_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [infos.size_data=0x"+Long.toHexString(get_infos_size_data())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [infos.valid_noise_samples=0x"+Long.toHexString(get_infos_valid_noise_samples())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [infos.noise=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_infos_noise(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [infos.metadata=";
        for (int i = 0; i < 2; i++) {
          s += "0x"+Long.toHexString(getElement_infos_metadata(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=";
        for (int i = 0; i < 60; i++) {
          s += "0x"+Long.toHexString(getElement_data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: infos.type
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'infos.type' is signed (false).
     */
    public static boolean isSigned_infos_type() {
        return false;
    }

    /**
     * Return whether the field 'infos.type' is an array (false).
     */
    public static boolean isArray_infos_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'infos.type'
     */
    public static int offset_infos_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'infos.type'
     */
    public static int offsetBits_infos_type() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'infos.type'
     */
    public int get_infos_type() {
        return (int)getUIntBEElement(offsetBits_infos_type(), 16);
    }

    /**
     * Set the value of the field 'infos.type'
     */
    public void set_infos_type(int value) {
        setUIntBEElement(offsetBits_infos_type(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'infos.type'
     */
    public static int size_infos_type() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'infos.type'
     */
    public static int sizeBits_infos_type() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: infos.log_src
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'infos.log_src' is signed (false).
     */
    public static boolean isSigned_infos_log_src() {
        return false;
    }

    /**
     * Return whether the field 'infos.log_src' is an array (false).
     */
    public static boolean isArray_infos_log_src() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'infos.log_src'
     */
    public static int offset_infos_log_src() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'infos.log_src'
     */
    public static int offsetBits_infos_log_src() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'infos.log_src'
     */
    public int get_infos_log_src() {
        return (int)getUIntBEElement(offsetBits_infos_log_src(), 16);
    }

    /**
     * Set the value of the field 'infos.log_src'
     */
    public void set_infos_log_src(int value) {
        setUIntBEElement(offsetBits_infos_log_src(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'infos.log_src'
     */
    public static int size_infos_log_src() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'infos.log_src'
     */
    public static int sizeBits_infos_log_src() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: infos.timestamp
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'infos.timestamp' is signed (false).
     */
    public static boolean isSigned_infos_timestamp() {
        return false;
    }

    /**
     * Return whether the field 'infos.timestamp' is an array (false).
     */
    public static boolean isArray_infos_timestamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'infos.timestamp'
     */
    public static int offset_infos_timestamp() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'infos.timestamp'
     */
    public static int offsetBits_infos_timestamp() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'infos.timestamp'
     */
    public long get_infos_timestamp() {
        return (long)getUIntBEElement(offsetBits_infos_timestamp(), 32);
    }

    /**
     * Set the value of the field 'infos.timestamp'
     */
    public void set_infos_timestamp(long value) {
        setUIntBEElement(offsetBits_infos_timestamp(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'infos.timestamp'
     */
    public static int size_infos_timestamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'infos.timestamp'
     */
    public static int sizeBits_infos_timestamp() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: infos.seq_num
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'infos.seq_num' is signed (false).
     */
    public static boolean isSigned_infos_seq_num() {
        return false;
    }

    /**
     * Return whether the field 'infos.seq_num' is an array (false).
     */
    public static boolean isArray_infos_seq_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'infos.seq_num'
     */
    public static int offset_infos_seq_num() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'infos.seq_num'
     */
    public static int offsetBits_infos_seq_num() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'infos.seq_num'
     */
    public int get_infos_seq_num() {
        return (int)getUIntBEElement(offsetBits_infos_seq_num(), 16);
    }

    /**
     * Set the value of the field 'infos.seq_num'
     */
    public void set_infos_seq_num(int value) {
        setUIntBEElement(offsetBits_infos_seq_num(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'infos.seq_num'
     */
    public static int size_infos_seq_num() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'infos.seq_num'
     */
    public static int sizeBits_infos_seq_num() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: infos.size_data
    //   Field type: short, unsigned
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'infos.size_data' is signed (false).
     */
    public static boolean isSigned_infos_size_data() {
        return false;
    }

    /**
     * Return whether the field 'infos.size_data' is an array (false).
     */
    public static boolean isArray_infos_size_data() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'infos.size_data'
     */
    public static int offset_infos_size_data() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'infos.size_data'
     */
    public static int offsetBits_infos_size_data() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'infos.size_data'
     */
    public short get_infos_size_data() {
        return (short)getUIntBEElement(offsetBits_infos_size_data(), 8);
    }

    /**
     * Set the value of the field 'infos.size_data'
     */
    public void set_infos_size_data(short value) {
        setUIntBEElement(offsetBits_infos_size_data(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'infos.size_data'
     */
    public static int size_infos_size_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'infos.size_data'
     */
    public static int sizeBits_infos_size_data() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: infos.valid_noise_samples
    //   Field type: short, unsigned
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'infos.valid_noise_samples' is signed (false).
     */
    public static boolean isSigned_infos_valid_noise_samples() {
        return false;
    }

    /**
     * Return whether the field 'infos.valid_noise_samples' is an array (false).
     */
    public static boolean isArray_infos_valid_noise_samples() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'infos.valid_noise_samples'
     */
    public static int offset_infos_valid_noise_samples() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'infos.valid_noise_samples'
     */
    public static int offsetBits_infos_valid_noise_samples() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'infos.valid_noise_samples'
     */
    public short get_infos_valid_noise_samples() {
        return (short)getUIntBEElement(offsetBits_infos_valid_noise_samples(), 8);
    }

    /**
     * Set the value of the field 'infos.valid_noise_samples'
     */
    public void set_infos_valid_noise_samples(short value) {
        setUIntBEElement(offsetBits_infos_valid_noise_samples(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'infos.valid_noise_samples'
     */
    public static int size_infos_valid_noise_samples() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'infos.valid_noise_samples'
     */
    public static int sizeBits_infos_valid_noise_samples() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: infos.noise
    //   Field type: int[], unsigned
    //   Offset (bits): 96
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'infos.noise' is signed (false).
     */
    public static boolean isSigned_infos_noise() {
        return false;
    }

    /**
     * Return whether the field 'infos.noise' is an array (true).
     */
    public static boolean isArray_infos_noise() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'infos.noise'
     */
    public static int offset_infos_noise(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'infos.noise'
     */
    public static int offsetBits_infos_noise(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'infos.noise' as a int[]
     */
    public int[] get_infos_noise() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_infos_noise(0); index0++) {
            tmp[index0] = getElement_infos_noise(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'infos.noise' from the given int[]
     */
    public void set_infos_noise(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_infos_noise(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'infos.noise'
     */
    public int getElement_infos_noise(int index1) {
        return (int)getUIntBEElement(offsetBits_infos_noise(index1), 16);
    }

    /**
     * Set an element of the array 'infos.noise'
     */
    public void setElement_infos_noise(int index1, int value) {
        setUIntBEElement(offsetBits_infos_noise(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'infos.noise'
     */
    public static int totalSize_infos_noise() {
        return (48 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'infos.noise'
     */
    public static int totalSizeBits_infos_noise() {
        return 48;
    }

    /**
     * Return the size, in bytes, of each element of the array 'infos.noise'
     */
    public static int elementSize_infos_noise() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'infos.noise'
     */
    public static int elementSizeBits_infos_noise() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'infos.noise'
     */
    public static int numDimensions_infos_noise() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'infos.noise'
     */
    public static int numElements_infos_noise() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'infos.noise'
     * for the given dimension.
     */
    public static int numElements_infos_noise(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: infos.metadata
    //   Field type: short[], unsigned
    //   Offset (bits): 144
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'infos.metadata' is signed (false).
     */
    public static boolean isSigned_infos_metadata() {
        return false;
    }

    /**
     * Return whether the field 'infos.metadata' is an array (true).
     */
    public static boolean isArray_infos_metadata() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'infos.metadata'
     */
    public static int offset_infos_metadata(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'infos.metadata'
     */
    public static int offsetBits_infos_metadata(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'infos.metadata' as a short[]
     */
    public short[] get_infos_metadata() {
        short[] tmp = new short[2];
        for (int index0 = 0; index0 < numElements_infos_metadata(0); index0++) {
            tmp[index0] = getElement_infos_metadata(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'infos.metadata' from the given short[]
     */
    public void set_infos_metadata(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_infos_metadata(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'infos.metadata'
     */
    public short getElement_infos_metadata(int index1) {
        return (short)getUIntBEElement(offsetBits_infos_metadata(index1), 8);
    }

    /**
     * Set an element of the array 'infos.metadata'
     */
    public void setElement_infos_metadata(int index1, short value) {
        setUIntBEElement(offsetBits_infos_metadata(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'infos.metadata'
     */
    public static int totalSize_infos_metadata() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'infos.metadata'
     */
    public static int totalSizeBits_infos_metadata() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'infos.metadata'
     */
    public static int elementSize_infos_metadata() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'infos.metadata'
     */
    public static int elementSizeBits_infos_metadata() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'infos.metadata'
     */
    public static int numDimensions_infos_metadata() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'infos.metadata'
     */
    public static int numElements_infos_metadata() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'infos.metadata'
     * for the given dimension.
     */
    public static int numElements_infos_metadata(int dimension) {
      int array_dims[] = { 2,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'infos.metadata' with a String
     */
    public void setString_infos_metadata(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_infos_metadata(i, (short)s.charAt(i));
         }
         setElement_infos_metadata(i, (short)0); //null terminate
    }

    /**
     * Read the array 'infos.metadata' as a String
     */
    public String getString_infos_metadata() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,2)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_infos_metadata(i) == (char)0) break;
             carr[i] = (char)getElement_infos_metadata(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: short[], unsigned
    //   Offset (bits): 160
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (true).
     */
    public static boolean isArray_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 60) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 60) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'data' as a short[]
     */
    public short[] get_data() {
        short[] tmp = new short[60];
        for (int index0 = 0; index0 < numElements_data(0); index0++) {
            tmp[index0] = getElement_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'data' from the given short[]
     */
    public void set_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'data'
     */
    public short getElement_data(int index1) {
        return (short)getUIntBEElement(offsetBits_data(index1), 8);
    }

    /**
     * Set an element of the array 'data'
     */
    public void setElement_data(int index1, short value) {
        setUIntBEElement(offsetBits_data(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'data'
     */
    public static int totalSize_data() {
        return (480 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'data'
     */
    public static int totalSizeBits_data() {
        return 480;
    }

    /**
     * Return the size, in bytes, of each element of the array 'data'
     */
    public static int elementSize_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data'
     */
    public static int elementSizeBits_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'data'
     */
    public static int numDimensions_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data'
     */
    public static int numElements_data() {
        return 60;
    }

    /**
     * Return the number of elements in the array 'data'
     * for the given dimension.
     */
    public static int numElements_data(int dimension) {
      int array_dims[] = { 60,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'data' with a String
     */
    public void setString_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_data(i, (short)s.charAt(i));
         }
         setElement_data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'data' as a String
     */
    public String getString_data() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,60)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_data(i) == (char)0) break;
             carr[i] = (char)getElement_data(i);
         }
         return new String(carr,0,i);
    }

}
